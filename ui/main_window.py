# Updated main_window.py - Complete Signal Integration
from PyQt5.QtWidgets import (
    QMainWindow,
    QWidget,
    QHBoxLayout,
    QSplitter,
    QMessageBox,
    QStatusBar,
)
from PyQt5.QtCore import Qt, pyqtSlot, QTimer
from PyQt5.QtGui import QCloseEvent

from .components.dashboard import Dashboard
from .components.config_panel import ConfigPanel
from .styles.theme import apply_gradient_theme
from utils.logger import UILogHandler
import logging

logger = logging.getLogger(__name__)


class MainWindow(QMainWindow):
    """Main window ‡∏û‡∏£‡πâ‡∏≠‡∏° Signal Integration ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""

    def __init__(self, controller):
        super().__init__()
        self.controller = controller
        self.ui_log_handler = None

        self.setup_window()
        self.setup_ui()
        self.setup_signal_connections()  # ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å signals
        self.setup_logging()
        self.load_initial_state()

        logger.info("üéâ Main window initialized with complete signal integration")

    def setup_window(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å"""
        self.setWindowTitle("SharePoint to SQL by ‡πÄ‡∏Æ‡∏µ‡∏¢‡∏ï‡∏≠‡∏°üòé")
        self.setGeometry(100, 100, 1400, 900)
        self.setMinimumSize(1200, 800)

        apply_gradient_theme(self)

        # Status bar
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("üü¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI components"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        layout = QHBoxLayout(central_widget)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(20)

        # Splitter for responsive layout
        splitter = QSplitter(Qt.Horizontal)

        # Main components
        self.dashboard = Dashboard(self.controller)
        self.config_panel = ConfigPanel(self.controller)

        splitter.addWidget(self.dashboard)
        splitter.addWidget(self.config_panel)
        splitter.setStretchFactor(0, 1)
        splitter.setStretchFactor(1, 2)
        splitter.setSizes([400, 800])

        layout.addWidget(splitter)

    def setup_signal_connections(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Signal Connections ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""

        # === CONTROLLER ‚Üí UI SIGNALS ===

        # Core status signals
        self.controller.status_changed.connect(self.on_status_changed)
        self.controller.progress_updated.connect(self.on_progress_updated)
        self.controller.sync_completed.connect(self.on_sync_completed)
        self.controller.log_message.connect(self.on_log_message)

        # === DASHBOARD ‚Üí CONTROLLER SIGNALS ===

        # Connection testing
        self.dashboard.test_connections_requested.connect(
            self.controller.test_all_connections
        )

        # Sync operations
        self.dashboard.start_sync_requested.connect(self.controller.start_sync)
        self.dashboard.stop_sync_requested.connect(self.controller.stop_sync)

        # UI operations
        self.dashboard.clear_logs_requested.connect(self.clear_logs)
        self.dashboard.auto_sync_toggled.connect(self.controller.toggle_auto_sync)

        # === CONFIG PANEL ‚Üí CONTROLLER SIGNALS ===

        # Configuration
        self.config_panel.config_changed.connect(self.controller.save_config)

        # Individual connection tests
        self.config_panel.test_sharepoint_requested.connect(
            self.controller.test_sharepoint_connection
        )
        self.config_panel.test_database_requested.connect(
            self.controller.test_database_connection
        )

        # Data refresh operations
        self.config_panel.refresh_sites_requested.connect(self._handle_refresh_sites)
        self.config_panel.refresh_lists_requested.connect(self._handle_refresh_lists)
        self.config_panel.refresh_databases_requested.connect(
            self._handle_refresh_databases
        )
        self.config_panel.refresh_tables_requested.connect(self._handle_refresh_tables)

        # === CROSS-COMPONENT SIGNALS ===

        # Dashboard status updates affect config panel
        self.controller.status_changed.connect(self._update_config_panel_status)

        logger.debug("‚úÖ All signal connections established")

    def setup_logging(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ UI logging handler"""
        self.ui_log_handler = UILogHandler(self.on_log_message)
        self.ui_log_handler.setLevel(logging.INFO)
        logging.getLogger().addHandler(self.ui_log_handler)

    def load_initial_state(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        try:
            config = self.controller.get_config()
            self.config_panel.load_config(config)

            # Test connections in background
            QTimer.singleShot(100, self.controller.test_sharepoint_connection)
            QTimer.singleShot(200, self.controller.test_database_connection)

            logger.info("‚úÖ Initial state loaded successfully")

        except Exception as e:
            logger.error(f"‚ùå Failed to load initial state: {str(e)}")
            self.show_error_message("‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", str(e))

    # === SLOT IMPLEMENTATIONS ===

    @pyqtSlot(str, str)
    def on_status_changed(self, service, status):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        self.dashboard.update_connection_status(service, status)

        # Update status bar
        status_messages = {
            ("SharePoint", "connected"): "üü¢ SharePoint ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß",
            ("Database", "connected"): "üü¢ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß",
            ("SharePoint", "error"): "üî¥ SharePoint ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
            ("Database", "error"): "üî¥ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
        }

        message = status_messages.get((service, status), f"üì° {service}: {status}")
        self.status_bar.showMessage(message)

    @pyqtSlot(str, int, str)
    def on_progress_updated(self, message, progress, level):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤"""
        self.dashboard.update_progress(message, progress, level)

        if progress > 0:
            self.status_bar.showMessage(f"üîÑ {message} ({progress}%)")

    @pyqtSlot(bool, str, dict)
    def on_sync_completed(self, success, message, stats):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"""
        self.dashboard.on_sync_completed(success, message, stats)

        if success:
            records = stats.get("records_inserted", 0)
            duration = stats.get("duration", 0)
            self.status_bar.showMessage(
                f"‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {records} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÉ‡∏ô {duration:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
            )
            self.show_success_message("‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", message)
        else:
            self.status_bar.showMessage(f"‚ùå ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {message}")
            self.show_error_message("‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", message)

    @pyqtSlot(str, str)
    def on_log_message(self, message, level):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° log"""
        self.dashboard.add_log_message(message, level)

    # === REFRESH HANDLERS ===

    def _handle_refresh_sites(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä SharePoint Sites"""
        try:
            self.status_bar.showMessage("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ã‡∏ï‡πå...")
            sites = self.controller.get_sharepoint_sites()
            # Update config panel with sites
            # self.config_panel.update_sharepoint_sites(sites)
            self.status_bar.showMessage(f"üì° ‡∏û‡∏ö‡πÑ‡∏ã‡∏ï‡πå {len(sites)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        except Exception as e:
            logger.error(f"Failed to refresh sites: {str(e)}")
            self.show_error_message("‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ã‡∏ï‡πå", str(e))

    def _handle_refresh_lists(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä SharePoint Lists"""
        try:
            self.status_bar.showMessage("üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏™‡∏ï‡πå...")
            config = self.config_panel.get_config()
            lists = self.controller.get_sharepoint_lists(config.site_url)
            self.config_panel.update_sharepoint_lists(lists)
            self.status_bar.showMessage(f"üìã ‡∏û‡∏ö‡∏•‡∏¥‡∏™‡∏ï‡πå {len(lists)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        except Exception as e:
            logger.error(f"Failed to refresh lists: {str(e)}")
            self.show_error_message("‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏™‡∏ï‡πå", str(e))

    def _handle_refresh_databases(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Databases"""
        try:
            self.status_bar.showMessage("üóÑÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
            databases = self.controller.get_databases()
            self.config_panel.update_databases(databases)
            self.status_bar.showMessage(f"üóÑÔ∏è ‡∏û‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(databases)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        except Exception as e:
            logger.error(f"Failed to refresh databases: {str(e)}")
            self.show_error_message("‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", str(e))

    def _handle_refresh_tables(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Tables"""
        try:
            self.status_bar.showMessage("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á...")
            tables = self.controller.get_tables()
            self.config_panel.update_tables(tables)
            self.status_bar.showMessage(f"üìä ‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á {len(tables)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        except Exception as e:
            logger.error(f"Failed to refresh tables: {str(e)}")
            self.show_error_message("‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á", str(e))

    def _update_config_panel_status(self, service, status):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô Config Panel"""
        # Enable/disable refresh buttons based on connection status
        if service == "SharePoint" and status == "connected":
            # Enable SharePoint refresh buttons
            pass
        elif service == "Database" and status == "connected":
            # Enable Database refresh buttons
            pass

    # === UTILITY METHODS ===

    def clear_logs(self):
        """‡∏•‡πâ‡∏≤‡∏á Log Console"""
        self.dashboard.clear_logs()
        logger.info("üßπ Log console cleared by user")

    def show_success_message(self, title, message):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        msg_box = QMessageBox(self)
        msg_box.setIcon(QMessageBox.Information)
        msg_box.setWindowTitle(title)
        msg_box.setText(message)
        msg_box.setStandardButtons(QMessageBox.Ok)
        msg_box.exec_()

    def show_error_message(self, title, message):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        msg_box = QMessageBox(self)
        msg_box.setIcon(QMessageBox.Critical)
        msg_box.setWindowTitle(title)
        msg_box.setText(message)
        msg_box.setStandardButtons(QMessageBox.Ok)
        msg_box.exec_()

    def show_question_dialog(self, title, message):
        """‡πÅ‡∏™‡∏î‡∏á Dialog ‡∏ñ‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"""
        msg_box = QMessageBox(self)
        msg_box.setIcon(QMessageBox.Question)
        msg_box.setWindowTitle(title)
        msg_box.setText(message)
        msg_box.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        msg_box.setDefaultButton(QMessageBox.No)
        return msg_box.exec_() == QMessageBox.Yes

    # === EVENT HANDLERS ===

    def closeEvent(self, event: QCloseEvent):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        try:
            # Check if sync is running
            if self.controller.get_sync_status()["is_running"]:
                if not self.show_question_dialog(
                    "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", "‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"
                ):
                    event.ignore()
                    return

                self.controller.stop_sync()

            # Cleanup
            self.controller.cleanup()

            if self.ui_log_handler:
                logging.getLogger().removeHandler(self.ui_log_handler)

            logger.info("üîÑ Application closing gracefully")
            event.accept()

        except Exception as e:
            logger.error(f"‚ùå Error during application close: {str(e)}")
            event.accept()

    def keyPressEvent(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Keyboard Shortcuts"""
        # F5 - Refresh connections
        if event.key() == Qt.Key_F5:
            self.controller.test_all_connections()

        # F9 - Start/Stop sync
        elif event.key() == Qt.Key_F9:
            if self.controller.get_sync_status()["is_running"]:
                self.controller.stop_sync()
            else:
                self.controller.start_sync()

        # Ctrl+L - Clear logs
        elif event.key() == Qt.Key_L and event.modifiers() == Qt.ControlModifier:
            self.clear_logs()

        # Ctrl+S - Save configuration
        elif event.key() == Qt.Key_S and event.modifiers() == Qt.ControlModifier:
            config = self.config_panel.get_config()
            self.controller.save_config(config)
            self.show_success_message("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        else:
            super().keyPressEvent(event)


# === ERROR HANDLING SYSTEM ===


class ErrorHandler:
    """Centralized Error Handling System"""

    @staticmethod
    def handle_connection_error(error, service_name):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        error_types = {
            "timeout": f"‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {service_name} ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤",
            "auth": f"‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô {service_name} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
            "network": f"‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {service_name}",
            "config": f"‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ {service_name} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        }

        # Determine error type
        error_str = str(error).lower()
        if "timeout" in error_str:
            return error_types["timeout"]
        elif "auth" in error_str or "401" in error_str:
            return error_types["auth"]
        elif "network" in error_str or "connection" in error_str:
            return error_types["network"]
        else:
            return error_types["config"]

    @staticmethod
    def handle_sync_error(error, phase):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå"""
        phase_messages = {
            "fetch": "‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SharePoint ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
            "transform": "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
            "load": "‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
        }

        base_message = phase_messages.get(phase, "‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        return f"{base_message}: {str(error)}"

    @staticmethod
    def suggest_solution(error_type, service_name):
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"""
        solutions = {
            ("timeout", "SharePoint"): [
                "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï",
                "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ Connection Timeout ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
                "‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô",
            ],
            ("auth", "SharePoint"): [
                "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Client ID ‡πÅ‡∏•‡∏∞ Client Secret",
                "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Tenant ID ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á SharePoint",
            ],
            ("config", "Database"): [
                "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Server Name ‡πÅ‡∏•‡∏∞ Database Name",
                "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Username ‡πÅ‡∏•‡∏∞ Password",
                "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firewall",
            ],
        }

        return solutions.get(
            (error_type, service_name),
            ["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà"],
        )


# === SIGNAL FLOW DIAGRAM ===
"""
Signal Flow Architecture:

UI Components          Controller            Business Logic
    ‚îÇ                     ‚îÇ                      ‚îÇ
    ‚îú‚îÄ Dashboard          ‚îÇ                      ‚îÇ
    ‚îÇ  ‚îú‚îÄ test_btn ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ test_connections ‚îÄ‚îÄ‚îº‚îÄ ConnectionManager
    ‚îÇ  ‚îú‚îÄ sync_btn ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ start_sync ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ SyncEngine  
    ‚îÇ  ‚îî‚îÄ auto_sync ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ toggle_auto_sync ‚îÄ‚îÄ‚îº‚îÄ Timer
    ‚îÇ                     ‚îÇ                      ‚îÇ
    ‚îú‚îÄ ConfigPanel        ‚îÇ                      ‚îÇ
    ‚îÇ  ‚îú‚îÄ config_change ‚îÄ‚îÄ‚îÄ‚îº‚îÄ save_config ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ ConfigManager
    ‚îÇ  ‚îú‚îÄ test_sp ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ test_sharepoint ‚îÄ‚îÄ‚îÄ‚îº‚îÄ SPConnector
    ‚îÇ  ‚îî‚îÄ refresh_* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ get_* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ Connectors
    ‚îÇ                     ‚îÇ                      ‚îÇ
    ‚îî‚îÄ MainWindow         ‚îÇ                      ‚îÇ
       ‚îú‚îÄ status_update ‚Üê‚îÄ‚îº‚îÄ status_changed ‚Üê‚îÄ‚îÄ‚îÄ‚îº‚îÄ Events
       ‚îú‚îÄ progress ‚Üê‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ progress_updated ‚Üê‚îÄ‚îº‚îÄ SyncThread
       ‚îî‚îÄ completion ‚Üê‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ sync_completed ‚Üê‚îÄ‚îÄ‚îÄ‚îº‚îÄ SyncEngine

Error Handling Flow:
    Exception ‚Üí ErrorHandler ‚Üí Log ‚Üí UI Notification ‚Üí User Action
"""
