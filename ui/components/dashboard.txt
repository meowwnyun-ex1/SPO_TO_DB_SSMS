from PyQt5.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QLabel,
    QFrame,
    QPushButton,
    QCheckBox,
    QTextEdit,
    QProgressBar,
)
from PyQt5.QtCore import Qt, pyqtSignal, pyqtSlot
from PyQt5.QtGui import QFont
from ..widgets.status_card import StatusCard
import logging

logger = logging.getLogger(__name__)


class Dashboard(QWidget):
    """Symmetrical Dashboard Layout - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤"""

    # Signals
    test_connections_requested = pyqtSignal()
    start_sync_requested = pyqtSignal()
    stop_sync_requested = pyqtSignal()
    clear_logs_requested = pyqtSignal()
    auto_sync_toggled = pyqtSignal(bool, int)

    def __init__(self, controller):
        super().__init__()
        self.controller = controller
        self.setup_ui()

    def setup_ui(self):
        """Layout ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏°‡∏≤‡∏ï‡∏£ - ‡∏à‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô sections ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"""
        # Main container with consistent spacing
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(25, 25, 25, 25)
        main_layout.setSpacing(20)

        # Brand Header
        self.create_brand_header(main_layout)

        # Connection Status Section
        self.create_connection_section(main_layout)

        # Sync Progress Section
        self.create_progress_section(main_layout)

        # Control Panel Section
        self.create_control_section(main_layout)

        # System Logs Section
        self.create_logs_section(main_layout)

    def create_brand_header(self, layout):
        """Brand header ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤"""
        header = QFrame()
        header.setStyleSheet(
            """
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #667eea, stop:1 #764ba2);
                border-radius: 12px;
            }
            QLabel {
                background: transparent;
                color: #ffffff;
            }
        """
        )
        header.setFixedHeight(80)

        header_layout = QVBoxLayout(header)
        header_layout.setContentsMargins(20, 12, 20, 12)
        header_layout.setSpacing(4)

        title = QLabel("SharePoint to Microsoft SQL")
        title.setFont(QFont("Segoe UI", 18, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)

        subtitle = QLabel("Thammaphon Chittasuwanna (SDM) | Innovation")
        subtitle.setFont(QFont("Segoe UI", 11))
        subtitle.setAlignment(Qt.AlignCenter)
        subtitle.setStyleSheet("color: rgba(255,255,255,0.85);")

        header_layout.addWidget(title)
        header_layout.addWidget(subtitle)

        layout.addWidget(header)

    def create_connection_section(self, layout):
        """Connection Status - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Authentication section"""
        conn_frame = QFrame()
        conn_frame.setStyleSheet(
            """
            QFrame {
                background: #2d3748;
                border: 1px solid #4a5568;
                border-radius: 8px;
            }
        """
        )

        conn_layout = QVBoxLayout(conn_frame)
        conn_layout.setContentsMargins(20, 20, 20, 20)
        conn_layout.setSpacing(15)

        # Section header with blue background
        header_frame = QFrame()
        header_frame.setStyleSheet(
            """
            QFrame {
                background: #00d4ff;
                border-radius: 4px;
            }
            QLabel {
                background: transparent;
                color: #1a202c;
                font-weight: bold;
            }
        """
        )
        header_frame.setFixedHeight(40)

        header_layout = QHBoxLayout(header_frame)
        header_layout.setContentsMargins(16, 10, 16, 10)

        header_label = QLabel("Connection Status")
        header_label.setFont(QFont("Segoe UI", 13, QFont.Bold))
        header_layout.addWidget(header_label)

        conn_layout.addWidget(header_frame)

        # Status cards in horizontal layout
        cards_layout = QHBoxLayout()
        cards_layout.setSpacing(12)

        self.sp_status = StatusCard("SharePoint", "disconnected")
        self.db_status = StatusCard("Database", "disconnected")
        self.sync_status = StatusCard("Last Sync", "never")

        cards_layout.addWidget(self.sp_status)
        cards_layout.addWidget(self.db_status)
        cards_layout.addWidget(self.sync_status)

        conn_layout.addLayout(cards_layout)
        layout.addWidget(conn_frame)

    def create_progress_section(self, layout):
        """Sync Progress - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Site Configuration"""
        progress_frame = QFrame()
        progress_frame.setStyleSheet(
            """
            QFrame {
                background: #2d3748;
                border: 1px solid #4a5568;
                border-radius: 8px;
            }
        """
        )

        prog_layout = QVBoxLayout(progress_frame)
        prog_layout.setContentsMargins(20, 20, 20, 20)
        prog_layout.setSpacing(15)

        # Section header
        header_frame = QFrame()
        header_frame.setStyleSheet(
            """
            QFrame {
                background: #00d4ff;
                border-radius: 4px;
            }
            QLabel {
                background: transparent;
                color: #1a202c;
                font-weight: bold;
            }
        """
        )
        header_frame.setFixedHeight(40)

        header_layout = QHBoxLayout(header_frame)
        header_layout.setContentsMargins(16, 10, 16, 10)

        header_label = QLabel("Sync Progress")
        header_label.setFont(QFont("Segoe UI", 13, QFont.Bold))
        header_layout.addWidget(header_label)

        prog_layout.addWidget(header_frame)

        # Progress content
        content_layout = QVBoxLayout()
        content_layout.setSpacing(10)

        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setStyleSheet(
            """
            QProgressBar {
                border: none;
                border-radius: 4px;
                background: #1a202c;
                text-align: center;
                font-weight: bold;
                color: #ffffff;
                min-height: 8px;
                max-height: 8px;
            }
            QProgressBar::chunk {
                border-radius: 4px;
                background: #48bb78;
            }
        """
        )
        self.progress_bar.setVisible(False)

        # Progress message
        self.progress_message = QLabel("Ready to sync")
        self.progress_message.setFont(QFont("Segoe UI", 11))
        self.progress_message.setStyleSheet("color: #a0aec0; background: transparent;")

        content_layout.addWidget(self.progress_bar)
        content_layout.addWidget(self.progress_message)

        prog_layout.addLayout(content_layout)
        layout.addWidget(progress_frame)

    def create_control_section(self, layout):
        """Control Panel - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Options section"""
        control_frame = QFrame()
        control_frame.setStyleSheet(
            """
            QFrame {
                background: #2d3748;
                border: 1px solid #4a5568;
                border-radius: 8px;
            }
        """
        )

        ctrl_layout = QVBoxLayout(control_frame)
        ctrl_layout.setContentsMargins(20, 20, 20, 20)
        ctrl_layout.setSpacing(15)

        # Section header
        header_frame = QFrame()
        header_frame.setStyleSheet(
            """
            QFrame {
                background: #00d4ff;
                border-radius: 4px;
            }
            QLabel {
                background: transparent;
                color: #1a202c;
                font-weight: bold;
            }
        """
        )
        header_frame.setFixedHeight(40)

        header_layout = QHBoxLayout(header_frame)
        header_layout.setContentsMargins(16, 10, 16, 10)

        header_label = QLabel("Control Panel")
        header_label.setFont(QFont("Segoe UI", 13, QFont.Bold))
        header_layout.addWidget(header_label)

        ctrl_layout.addWidget(header_frame)

        # Control content
        content_layout = QVBoxLayout()
        content_layout.setSpacing(12)

        # Main action buttons
        main_buttons = QHBoxLayout()
        main_buttons.setSpacing(10)

        self.test_btn = QPushButton("üîç Test Connections")
        self.test_btn.setStyleSheet(self.get_primary_button_style())
        self.test_btn.setFixedHeight(42)
        self.test_btn.clicked.connect(self.test_connections_requested.emit)

        self.sync_btn = QPushButton("üöÄ Start Sync")
        self.sync_btn.setStyleSheet(self.get_success_button_style())
        self.sync_btn.setFixedHeight(42)
        self.sync_btn.clicked.connect(self._toggle_sync)

        main_buttons.addWidget(self.test_btn)
        main_buttons.addWidget(self.sync_btn)

        # Secondary controls
        secondary_layout = QHBoxLayout()
        secondary_layout.setSpacing(10)

        self.clear_btn = QPushButton("üßπ Clear Logs")
        self.clear_btn.setStyleSheet(self.get_warning_button_style())
        self.clear_btn.setFixedHeight(36)
        self.clear_btn.clicked.connect(self.clear_logs_requested.emit)

        # Auto sync checkbox
        self.auto_sync_check = QCheckBox("üîÑ Auto Sync")
        self.auto_sync_check.setStyleSheet(
            """
            QCheckBox {
                color: #ffffff;
                font-size: 12px;
                font-family: 'Segoe UI';
                spacing: 8px;
                background: transparent;
                padding: 8px;
            }
            QCheckBox::indicator {
                width: 16px;
                height: 16px;
            }
            QCheckBox::indicator:unchecked {
                background: #1a202c;
                border: 2px solid #4a5568;
                border-radius: 3px;
            }
            QCheckBox::indicator:checked {
                background: #48bb78;
                border: 2px solid #48bb78;
                border-radius: 3px;
            }
        """
        )
        self.auto_sync_check.toggled.connect(self._toggle_auto_sync)

        secondary_layout.addWidget(self.clear_btn)
        secondary_layout.addWidget(self.auto_sync_check)

        content_layout.addLayout(main_buttons)
        content_layout.addLayout(secondary_layout)

        ctrl_layout.addLayout(content_layout)
        layout.addWidget(control_frame)

    def create_logs_section(self, layout):
        """System Logs - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô bottom section ‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤"""
        logs_frame = QFrame()
        logs_frame.setStyleSheet(
            """
            QFrame {
                background: #2d3748;
                border: 1px solid #4a5568;
                border-radius: 8px;
            }
        """
        )

        logs_layout = QVBoxLayout(logs_frame)
        logs_layout.setContentsMargins(20, 20, 20, 20)
        logs_layout.setSpacing(15)

        # Section header
        header_frame = QFrame()
        header_frame.setStyleSheet(
            """
            QFrame {
                background: #00d4ff;
                border-radius: 4px;
            }
            QLabel {
                background: transparent;
                color: #1a202c;
                font-weight: bold;
            }
        """
        )
        header_frame.setFixedHeight(40)

        header_layout = QHBoxLayout(header_frame)
        header_layout.setContentsMargins(16, 10, 16, 10)

        header_label = QLabel("System Logs")
        header_label.setFont(QFont("Segoe UI", 13, QFont.Bold))
        header_layout.addWidget(header_label)

        logs_layout.addWidget(header_frame)

        # Log console
        self.log_console = QTextEdit()
        self.log_console.setStyleSheet(
            """
            QTextEdit {
                background: #0f1419;
                border: 1px solid #374151;
                border-radius: 6px;
                color: #48bb78;
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 11px;
                padding: 12px;
                line-height: 1.3;
            }
            QScrollBar:vertical {
                background: #1a202c;
                width: 8px;
                border-radius: 4px;
            }
            QScrollBar::handle:vertical {
                background: #4a5568;
                border-radius: 4px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background: #718096;
            }
            QScrollBar::add-line:vertical, 
            QScrollBar::sub-line:vertical {
                height: 0px;
            }
        """
        )
        self.log_console.setFixedHeight(120)
        self.log_console.setReadOnly(True)
        self.log_console.setPlaceholderText("System logs will appear here...")

        logs_layout.addWidget(self.log_console)
        layout.addWidget(logs_frame)

    def get_primary_button_style(self):
        """Blue button style"""
        return """
            QPushButton {
                background: #3182ce;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 12px 20px;
                font-weight: 600;
                font-size: 12px;
                font-family: 'Segoe UI';
            }
            QPushButton:hover {
                background: #2c5aa0;
            }
            QPushButton:pressed {
                background: #2a4d96;
            }
        """

    def get_success_button_style(self):
        """Green button style"""
        return """
            QPushButton {
                background: #38a169;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 12px 20px;
                font-weight: 600;
                font-size: 12px;
                font-family: 'Segoe UI';
            }
            QPushButton:hover {
                background: #2f855a;
            }
            QPushButton:pressed {
                background: #276749;
            }
        """

    def get_warning_button_style(self):
        """Orange button style"""
        return """
            QPushButton {
                background: #ed8936;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 8px 16px;
                font-weight: 600;
                font-size: 11px;
                font-family: 'Segoe UI';
            }
            QPushButton:hover {
                background: #dd6b20;
            }
            QPushButton:pressed {
                background: #c05621;
            }
        """

    # Event handlers
    def _toggle_sync(self):
        if self.controller.get_sync_status()["is_running"]:
            self.stop_sync_requested.emit()
        else:
            self.start_sync_requested.emit()

    def _toggle_auto_sync(self, checked):
        self.auto_sync_toggled.emit(checked, 3600)

    # Public update methods
    @pyqtSlot(str, str)
    def update_connection_status(self, service, status):
        if service == "SharePoint":
            self.sp_status.update_status(status)
        elif service == "Database":
            self.db_status.update_status(status)

    @pyqtSlot(str, int, str)
    def update_progress(self, message, progress, level):
        self.progress_message.setText(message)

        if progress > 0:
            self.progress_bar.setVisible(True)
            self.progress_bar.setValue(progress)
        else:
            self.progress_bar.setVisible(False)

    @pyqtSlot(bool, str, dict)
    def on_sync_completed(self, success, message, stats):
        self.progress_bar.setVisible(False)

        if success:
            self.sync_btn.setText("üöÄ Start Sync")
            self.sync_btn.setStyleSheet(self.get_success_button_style())
            self.sync_status.update_status("success", "Completed")
            self.progress_message.setText("Sync completed successfully")
        else:
            self.sync_btn.setText("üöÄ Start Sync")
            self.sync_btn.setStyleSheet(self.get_success_button_style())
            self.sync_status.update_status("error", "Failed")
            self.progress_message.setText("Sync failed")

    def add_log_message(self, message, level):
        from datetime import datetime

        timestamp = datetime.now().strftime("%H:%M:%S")

        colors = {
            "info": "#48bb78",
            "success": "#68d391",
            "warning": "#ed8936",
            "error": "#f56565",
        }

        color = colors.get(level, "#ffffff")
        formatted = f'<span style="color: {color}">[{timestamp}] {message}</span>'

        self.log_console.append(formatted)

        # Auto scroll
        cursor = self.log_console.textCursor()
        cursor.movePosition(cursor.End)
        self.log_console.setTextCursor(cursor)

    def clear_logs(self):
        self.log_console.clear()

    def set_auto_sync_enabled(self, enabled):
        self.auto_sync_check.setChecked(enabled)
